/******************************************************************************
 * Copyright (c) 2000-2018 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 ******************************************************************************/
/*
//AUTHOR: ethbaat
//DATE: 2012-06-12
//VERSION:
*/
module ttcnpp_test_main
{
#line 6 "First marker"
#define A_IMPORTED
#if defined A_IMPORTED
import from ttcnpp_test_imported_A all;
#endif
#line 24 "Second Marker"
#define B_IMPORTED
#if defined B_IMPORTED
import from ttcnpp_test_imported_B all;
#endif

type component My_CT {}

//=========================================================================
// Functions
//=========================================================================
function f_include_test() runs on My_CT {
  var integer vl_i:=1;
  #include "ttcnpp_test_incl1.ttcnin"
  log(vl_i);
  if(vl_i==124){ setverdict(pass)} else {setverdict(fail)}
}
//=========================================================================
// Testcases for #if, #ifdef, #ifndef #define, #undefine
//=========================================================================
testcase tc_if_and_macro_expr() runs on My_CT {
  #define ZERO 0
  #define ONE 1
  #define TWO 2
  #define THREE 3
  #define FOUR 4

  //var integer i:= ONE ;
  // #if false constructs
  #if 0
  setverdict(fail);
  #endif
  //verdict:pass (because its background is grey )

  #if 0
  setverdict(fail);
  #else
  setverdict(pass);
  #endif

  #if 0
  setverdict(fail);
  #elif -3
  setverdict(pass);
  #else //commented out
  setverdict(fail);
  #endif
  //verdict:pass

  #if 0
  setverdict(fail);
  #elif 0
  setverdict(fail);
  #elif ZERO
  setverdict(fail);
  #else 
  setverdict(pass);
  #endif
  //verdict:pass

  //#if true constructs
  #if 1
  setverdict(pass);
  #endif

  #if 2147483647
  setverdict(pass);
  #endif

  #if -2147483647
  setverdict(pass);
  #endif  

  #if -1
  setverdict(pass);
  #endif

  //verdict:pass
  #if 1
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
  //verdict:pass

  #if 100
  setverdict(pass);
  #elif -2
  setverdict(fail);
  #else //commented out
  setverdict(fail);
  #endif
  //verdict:pass

  #if 100
  setverdict(pass);
  #elif 0
  setverdict(fail);
  #else //commented out
  setverdict(fail);
  #endif
  //verdict:pass

  #if ((ONE+ONE)*THREE==6)
  setverdict(pass);
  #endif
  //verdict:pass

  #if ((ONE+ONE)*THREE==6)
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
  //verdict:pass

  #if (ONE+TWO*THREE==7)
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
  //verdict:pass

  #if(THREE-TWO==ONE)
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
  //verict: fail

  #if(THREE>TWO)
  setverdict(pass);
  #endif

}//tc_if

testcase tc_define_ifdef() runs on My_CT {
  //************** define and ifdef************************************/
  setverdict(pass);//wrong highlighting, if */ removed from the prev line

  #define MYMACRO1

  #ifdef MYMACRO1
  setverdict(pass);
  #endif

  #ifdef MYMACRO1
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

  #ifdef MYMACRO1
  setverdict(pass);
  #elif 12
  setverdict(fail);
  #else
  setverdict(fail);
  #endif

  #ifdef MYMACRO1
  setverdict(pass);
  #define MYMACRO2
  #ifdef MYMACRO2
  setverdict(pass);
  #else
  setverdict(fail)
  #endif
  setverdict(pass);
  #else
  setverdict(false);
  #endif

  #ifdef MYMACRO
  setverdict(pass);
  #endif

  #undef MYMACRO1
  #ifdef MYMACRO1
  setverdict(fail);
  #endif

  #ifdef MYMACRO1
  setverdict(fail);
  #else
  setverdict(pass);
  #endif

  #ifdef MYMACRO1
  setverdict(fail);
  #elif 12
  setverdict(pass);
  #else
  setverdict(fail);
  #endif


  #undef MYMACRO1
  #undef MYMACRO2
}

testcase tc_define_ifndef() runs on My_CT {

  #define MYMACRO1
  #ifndef MYMACRO1
  setverdict(fail);
  #endif

  #ifndef MYMACRO1
  setverdict(fail);
  #else
  setverdict(pass);
  #endif

  #ifndef MYMACRO1
  setverdict(fail);
  #elif 12
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

  #ifndef MYMACRO1
  setverdict(fail);
  #define MYMACRO2
  #ifdef MYMACRO2
  setverdict(fail);
  #else
  setverdict(fail)
  #endif
  setverdict(pass);
  #else
  setverdict(pass);
  #define MYMACRO2
  #ifndef MYMACRO2
  setverdict(fail);
  #else
  setverdict(pass)
  #endif
  #endif
}



testcase tc_undef_ifndef() runs on My_CT {  
  #undef MYMACRO1

  #ifndef MYMACRO1
  setverdict(pass);
  #endif

  #ifndef MYMACRO1
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

  #ifndef MYMACRO1
  setverdict(pass);
  #elif 12
  setverdict(fail);
  #else
  setverdict(fail);
  #endif

}

testcase tc_if_not_defined() runs on My_CT {  
  #undef MYMACRO1
  
  // replace "not" with "!"
  #if ! defined MYMACRO1
  setverdict(pass);
  #endif

  #if ! defined MYMACRO1
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

  #if ! defined MYMACRO1
  setverdict(pass);
  #elif 12
  setverdict(fail);
  #else
  setverdict(fail);
  #endif
  
  //with ():
  #if ! defined (MYMACRO1)
  setverdict(pass);
  #endif

  #if ! defined (MYMACRO1)
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

  #if !defined (MYMACRO1)
  setverdict(pass);
  #elif 12
  setverdict(fail);
  #else
  setverdict(fail);
  #endif
}

testcase tc_undef_ifdef() runs on My_CT {  
  #undef MYMACRO1

  #ifdef MYMACRO1
  setverdict(fail);
  #endif

  #ifdef MYMACRO1
  setverdict(fail);
  #else
  setverdict(pass);
  #endif

  #ifdef MYMACRO1
  setverdict(fail);
  #elif 12
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

}

testcase tc_embedded_ifs() runs on My_CT {
  #if 1 && -1
  setverdict(pass)
  #if 0 
  setvedict(fail)
  #else
  setverdict(pass)
  #endif
  #else
  setverdict(fail)
  #if 0 
  setvedict(fail)
  #else
  setverdict(fail)
  #endif
  #endif

  #if 0
  setverdict(fail)
  #if 0 
  setvedict(fail)
  #else
  setverdict(fail)
  #endif
  #else
  setverdict(pass)
  #if 0 
  setvedict(fail)
  #else
  setverdict(pass)
  #endif
  #endif
}

testcase tc_cascade() runs on My_CT {
  #define TWENTY 20
  #define TWENTY2 TWENTY
  #define TWENTY3 TWENTY2
  #define TWENTY4 TWENTY3
  #define TWENTY5 TWENTY4
  
  #if TWENTY2 == 20
   setverdict(pass)
  #else
   setverdict(fail)
  #endif  
  
  #if TWENTY5 == 20
   setverdict(pass)
  #else
   setverdict(fail)
  #endif
  
  #if TWENTY5 != 20
   setverdict(fail)
  #else
   setverdict(pass)
  #endif
  
}

testcase tc_three_operands() runs on My_CT {
  #define AAA 1
  #if AAA ? 0 : 1
  setverdict(fail)
  #else
  setverdict(pass);
  #endif
  
  #define AAA 1
  #if AAA ? 1 : 0
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
   
  #define AAA 0
  #if AAA ? 1 : 0
  setverdict(fail)
  #else
  setverdict(pass);
  #endif 
  
  #define AAA 0
  #if AAA ? 0 : 1
  setverdict(pass)
  #else
  setverdict(fail);
  #endif 
}
//=========================================================================
// Testcases for #defined - import
//=========================================================================
testcase tc_A() runs on My_CT {
  #if defined A_IMPORTED
  var integer vl_i:=cg_A_i;
  log(vl_i);
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
}

testcase tc_B() runs on My_CT {
  #if defined B_IMPORTED
  var integer vl_i:=cg_B_i;
  log(vl_i);
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
}

#if defined A_IMPORTED
#if defined B_IMPORTED
#define A_AND_B_DEFINED
#endif
#endif

testcase tc_AandB() runs on My_CT {
  #if defined  A_AND_B_DEFINED 
  var integer vl_i:=cg_A_i+cg_B_i;
  setverdict(pass);
  #else
  setverdict(fail)
  #endif
  log(vl_i);
}

#undef A_IMPORTED
testcase tc_if_defined() runs on My_CT {
  #if defined A_IMPORTED
  var integer vl_i:=c_A_i;
  log(vl_i);
  setverdict(fail);
  #else
  setverdict(pass);
  #endif
}

#undef A_IMPORTED
//this line inserts: #define A_IMPORTED
#include "ttcnpp_test_incl2.ttcnin"
testcase tc_include_ttcnin() runs on My_CT {
  #if defined A_IMPORTED
  var integer vl_i:=cg_A_i;
  log(vl_i);
  setverdict(pass);
  #else
  setverdict(fail);
  #endif
}

testcase tc_bitoperands() runs on My_CT{
  #define A 0xFF
  #define B 0x00

  #if (A & B == B)
  setverdict(pass);
  #else
  setverdict(fail);
  #endif

  #if ((A & B) == A)
  setverdict(fail);
  #else
  setverdict(pass);
  #endif

  #if (A|B == B)
  setverdict(pass)
  #else
  setverdict(fail);
  #endif

  #if (A|B == A)
  setverdict(pass)
  #else
  setverdict(fail);
  #endif

  #define A 0x03
  #define B 0x04

  //0000 0011 && 0000 0100
  #if ((A & B) == B)
  setverdict(fail);
  #else
  setverdict(pass);
  #endif

  #if ((A | B)  == A)
  setverdict(fail)
  #else
  setverdict(pass);
  #endif

}

testcase tc_wrap() runs on My_CT{

#define FO\
O 10\
20
#if FOO == 1020
setverdict(pass)
#else
setverdict(fail);
#endif
}



//=========================================================================
// Control
//=========================================================================

control{
  execute(tc_if_and_macro_expr());
  execute(tc_define_ifdef());
  execute(tc_define_ifndef());
  execute(tc_undef_ifndef());
  execute(tc_undef_ifdef());
  execute(tc_embedded_ifs());
  execute(tc_cascade());
  execute(tc_three_operands());
  execute(tc_A());
  execute(tc_B());
  execute(tc_AandB());
  execute(tc_if_defined());
  execute(tc_include_ttcnin());
  execute(tc_bitoperands());
  execute(tc_wrap());
}

}  // end of module

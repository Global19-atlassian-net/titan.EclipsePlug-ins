//This test checks if a template can be accepted or not 
//where a template or a value is expected
//E.g: if a value expected, template must not be accepted
//If a template expected, template and value shall be accepted
//Generally the type of the template is not important in this test 
//TODO: Put into plugin regression_test
module ExpectedValueTypeTest {

//import from Types all;

modulepar Rec tsp_rec := {1,"a"}; //
modulepar template Rec tsp_trec := {1,"b"}; //A_MODULEPAR_TEMPLATE
modulepar template integer tsp_i := 1; //A_MODULEPAR_TEMPLATE
modulepar template Rec tsp_rec1 := 1; //expected error
modulepar template Rec tsp_rec2 := {1, cg_cs};
const charstring cg_cs := "Abba";

type record Rec {
  integer i,
  charstring cs
}

template Rec t_rec(integer pl_i, charstring pl_cs) :={
  i:=pl_i,
  cs:=pl_cs 
}

template charstring t_cs := ?; 

template Rec t_rec1( integer pl_i, template charstring pl_cs) := {
  i := pl_i,
  cs := pl_cs
}

template Rec t_rec1_1 := t_rec1(tsp_i,"a");//ok, expecting error

template (value) Rec t_rec2( integer pl_i, template (value) charstring pl_cs) := {
  i := pl_i,
  cs := pl_cs
}

template (value) Rec t_rec3( integer pl_i, template charstring pl_cs) := { //ok, expecting error: Formal parameter without template restriction not allowed here
  i := pl_i,
  cs := pl_cs
}

//function returning a rec
function f_r() return Rec {
  return tsp_rec;
}

//function returning a rec but gets a template
function f_r_wrong1() return Rec {
  return tsp_trec; //OK: expecting error: Reference to a value was expected instead of
}

//function returning a rec but gets a template
function f_r_wrong2() return Rec {
  return t_rec1(1,"a");//OK: expecting error: Reference to a value was expected instead of
}

function f_r_wrong3() return Rec {
  return t_rec2(1,"a");//OK: expecting error: Reference to a value was expected instead of
}

//function returning on a template rec
function f_rt() return template Rec {
  return tsp_trec;
}

function f_rt_wrong() return template Rec { 
  return tsp_i; //ok, expeced error
}

function f_rt1() return template Rec {
  var template Rec vt_rec := {1,tsp_i} //ok, expected error
  template Rec tl_rec1 := {1,tsp_i} //ok, expected error
  return vt_rec;
}

function f_rt_par(template Rec pl_rec) return Rec {
  return pl_rec;//ok, expected error
}

function f_rt_parin(in template Rec pl_rec) return Rec {
  return pl_rec;//ok, expected error
}

function f_rt_parout(out template Rec pl_rec) return Rec {
  return pl_rec;//ok, expected error
}

function f_rt_parinout(inout template Rec pl_rec) return Rec {
  return pl_rec;//ok, expected error
}

function f_rt_templatevar() return Rec {
  var template Rec vt_rec_ := {1,"a"};
  return vt_rec_; //ok, expected error
}

function f_rt_template() return Rec {
  template Rec t_rec_ := {1,"a"}
  return t_rec_; //ok, expected error
}

function f_rt_templatevar_cs() return charstring {
  var template charstring vt_cs := "a" & tsp_i; //ok, expected error
  return vt_cs; //ok, expected error
}

function f_1(
  integer pl_i,
  template Rec pl_rec,
  in template Rec pl_recin,
  inout template Rec pl_recinout,
  out template Rec pl_recout) {
  var Rec vl_rec := pl_rec; //ok, error expected: :8.21-27: error: Reference to a value was expected instead of template parameter `tpl_rec'
  var Rec vl_rec2 := tsp_trec; //ok, error expected: Reference to a value was expected instead of ...
  var Rec vl_rec3 := pl_recin; //ok, error expected: Reference to a value was expected instead of 
  var Rec vl_rec4 := pl_recinout; //ok, error expected: Reference to a value was expected instead of
  var Rec vl_rec5 := pl_recout; //ok, error expected: Reference to a value was expected instead of
  var Rec vl_rec6 := f_rt(); //ok, error expected: Reference to a value was expected instead of
  var Rec vl_rec7 := f_r();

  var Rec vl_rec8 := vl_rec;
  var template Rec vt_rec9 := vl_rec;
  var Rec vl_rec10 := vt_rec9; //ok, error expected: Reference to a value was expected instead of
}

function f_2(
  integer pl_i,
  template Rec pl_rec,
  in template Rec pl_recin,
  inout template Rec pl_recinout,
  out template Rec pl_recout
){
  var template Rec vt_recl := pl_rec; //ok, no error
  var template Rec vt_rec2l := tsp_trec; //ok, no error
  var template Rec vt_rec3l := pl_recin; //ok, no error
  var template Rec vt_rec4l := pl_recinout; //ok, no error
  var template Rec vt_rec5l := pl_recout; //ok, no error
  var template Rec vt_rec6l := f_rt(); //ok, no error
  var template Rec vt_rec7l := f_r(); //ok, no error 
  var template Rec vt_rec8l := t_rec1(tsp_i,cg_cs);
  var template Rec vt_rec9l := t_rec1(1,t_cs);//ok, no error 
  var template integer vt_il := 3+2;
}



type component CT {}


testcase tc_1() runs on CT {
  var template Rec vt_trec1_:= {1,"a"};
  var template Rec vt_trec2_:= {1,"a"};
  template Rec t_trec3 := {1,"a"}
  f_1(
    pl_i:=1,
    pl_rec := t_rec(1,"a"),
    pl_recin := vt_trec1_,
    pl_recinout := vt_trec2_,
    pl_recout :=  t_trec3 //ok, expected error
  );
}

}


###############################################################################
# Copyright (c) 2000-2019 Ericsson Telecom AB
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v2.0
# which accompanies this distribution, and is available at
# https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
#
# Contributors:
#   Balasko, Jeno
#   Baranyi, Botond
#
###############################################################################

[DEFINE]
MACRO_CS := "macro"
MACRO_INT := 1

[MODULE_PARAMETERS]

# integer
tsp_1 := 1
tsp_1 := tsp_1 - 1 - ${MACRO_INT, integer}
tsp_1 := +1;
tsp_1 := tsp_1 + 1;

tsp_2 := tsp_1 - tsp_2 + 10 / tsp_1;
tsp_3 := (tsp_1 + 2) * 5;
tsp_3 := tsp_3 + tsp_list2[tsp_1 - 1 - ${MACRO_INT, integer}];

# float
tsp_4 := -3.0;
tsp_5 := +tsp_4 / 0.5 - 1.5 * (tsp_5 + 1.0);

# bitstring
tsp_bs1 &= '1101'B & tsp_bs2 & '01'B;
tsp_bs2 := tsp_bs2 & tsp_bs1;
tsp_bs1 &= tsp_bs2;

# hexstring
tsp_hs1 := '77FF'H & tsp_hs1 & tsp_hs2;
tsp_hs2 &= 'EE'H;

# octetstring
tsp_os1 := 'DEAD'O;
tsp_os2 := 'A22C'O & tsp_os1 & 'C22A'O;

# charstring
tsp_cs1 &= tsp_cs2;
tsp_cs1 := tsp_cs1 & "ghi";
tsp_cs2 := "xx" & tsp_cs1 & "xx" & tsp_cs2;
tsp_cs3 := tsp_ucs1 & "xx";

# universal charstring
tsp_ucs1 := "a" & tsp_ucs2;
tsp_ucs2 := "űrhajó" & tsp_cs1 & char(tsp_1 + 1, 5, tsp_1 * 5, 5) & "x";

# boolean
tsp_b1 := tsp_b2;
tsp_b2 := tsp_uni2.bval;
#tsp_b2 := not tsp_b2; #not works, not required

# objid
tsp_objid2 := tsp_objid1;

# verdicttype
tsp_vt2 := tsp_vt1;

# cotsp_onent
tsp_cotsp_2 := tsp_cotsp_1;

# default
tsp_def2 := tsp_def1;

# enumerated
tsp_enum2 := references.tsp_enum1;
tsp_enum1 := Large;

# record of
tsp_list1 := tsp_list2;
tsp_list2 := { [tsp_1 / 2] := 3, [0] := tsp_rec1.num };
tsp_list2 &= tsp_list1;

# record
tsp_rec3 := tsp_rec1;
tsp_rec1 := tsp_rec2;
tsp_rec2 := tsp_rec3;
tsp_rec3 := { tsp_list1[0], tsp_cs1 };

# empty record
tsp_emptyrec2 := tsp_emptyrec1;

# union
tsp_uni3 := tsp_uni1;
tsp_uni1 := tsp_uni2;
tsp_uni2 := tsp_uni3;
tsp_uni3 := { osval := tsp_os1 & tsp_os2 };

# array
tsp_array1 := { tsp_array2[0], tsp_cs1 & "xx" };
tsp_array2 := tsp_array1;

# integer template
tsp_tint1 := tsp_tint2;
tsp_tint2 := (tsp_1 + 6, tsp_2, - tsp_3, - ${MACRO_INT, integer});

# float template
tsp_tf1 := tsp_tf2 ifpresent;
tsp_tf2 := (tsp_4 / 2.0, tsp_5 * 1.5);

# charstring template
tsp_tcs1 := tsp_tcs1 length(2 .. tsp_2 - 1);
tsp_tcs2 := "xx" & tsp_tcs2 & "xx" ifpresent;
tsp_tcs3 := tsp_tcs3 & "d" & tsp_tarray2[1];

# universal charstring template
tsp_tucs3 := (tsp_tucs1, ("a".."z"));
tsp_tucs2 := "zz" & tsp_ucs2 & "zz";
tsp_tucs1 := pattern "a??b" & ${MACRO_CS} & char(1, 2, 3, 4) & tsp_ucs1;

# bitstring template
tsp_tbs1 := '110'B & tsp_bs1 & '011'B;
tsp_tbs2 := tsp_tbs2 ifpresent;
tsp_tbs3 := tsp_tbs3;

# hexstring template
tsp_ths1 := 'AB'H & tsp_hs1 & 'BA'H;
tsp_ths2 := tsp_ths2;
tsp_ths3 := tsp_ths3 length (7..infinity);

# octetstring template
tsp_tos1 := '01'O & tsp_os1 & '10'O;
tsp_tos2 := tsp_tos2;
tsp_tos3 := tsp_tos3;

# boolean template
tsp_tb1 := (tsp_tb1, tsp_tb2);
tsp_tb2 := tsp_tuni3.bval;

# component template
tsp_tcomp2 := tsp_tctsp_p1;

# default template
tsp_tdef2 := tsp_tdef1;

# verdicttype template
tsp_tvt1 := tsp_tvt2;
tsp_tvt2 := tsp_vt2;
tsp_tvt3 := inconc;

# enumerated template
mptenum1 = mptenum2;
mptenum2 := mpenum2;
mptenum3 := Medium;

# objid template
mptobjid1 := mptobjid2;
mptobjid2 := mpobjid1;

# record template
mptrec1 := mptrec2;
mptrec2 := { num := mptrec2.num, str := mptcs1 };
mptrec3 := ( mptrec3, mprec1, mprec2, mprec3 );

# empty record template
mptemptyrec1 := mptemptyrec2;
mptemptyrec2 := mpemptyrec1;

# record of template
mptlist1 := { [2] := mptlist2[0], [1] := mptlist2[1], [0] := mptlist2[2] } length (1..4);
mptlist2 := mptlist3;
mptlist3 := complement ( mptlist2, mplist1, mplist2 );

# union template
mptuni1 := mptuni2;
mptuni2 := { ival := mptint2 };
mptuni3 := ( mpuni1, mpuni2, mpuni3 );

# array template
mptarray1 := mptarray2 ifpresent;
mptarray2 := mptarray3;
mptarray3 := mparray1;

##### asn1 #########
tsp_TRUE := tsp_FALSE;
tsp_FALSE := false;
#tsp3_RESULT1 := tsp_TRUE or tsp_FALSE; not required
#tsp3_RESULT2 := tsp_TRUE and tsp_FALSE; not required
tsp_asnbitstr1 := '0'B
tsp_asnbitstr2 := '01'B
tsp_asnbitstr3 := tsp_asnbitstr1 & tsp_asnbitstr2 & '0101'B;
tsp_asnos1 := '12'O
tsp_asnos2 := 'EF'O
tsp_asnos3 := tsp_asnos1 & tsp_asnos2 & '0123456789'O
tsp_asnstr1 :="Laci"
tsp_asnstr2 :="1()"
tsp_asnstr3 := tsp_asnstr1 & tsp_asnstr2 & "tail"

tsp_asnint1 := +1
tsp_asnint2 := 2*tsp_asnint1
tsp_asnint3 := tsp_asnint1 + tsp_asnint2
tsp_asnint3 := (tsp_asnint1 + tsp_asnint2)*2-10/tsp_asnint1  #3*2 -10/1=-4

tsp_asnreal1 := +1.0
tsp_asnreal2 := 2.0 * tsp_asnreal1
tsp_asnreal3 := (tsp_asnreal1 + tsp_asnreal2)*2.0- 10.0/tsp_asnreal1 #= -4.0
#tsp_asnreal3 := (tsp_asnreal1 + tsp_asnreal2)*2.0-10.0/tsp_asnreal1 #FIXME: This line is not accepted by the executor 
[EXECUTE]
references.control
#references.tc_asn1_bool
#references.tc_asn1_bitstr

/******************************************************************************
* Copyright (c) 2000-2020 Ericsson Telecom AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*
******************************************************************************/
module JsonBasicAttributeTest {

type component CT {}

function f_compare_bitstring(in bitstring pl_val, in bitstring pl_expected) {
  if ( pl_val == pl_expected ){
    setverdict(pass);
  } else {
    setverdict( fail, "expected: ", pl_expected, " got: ", pl_val)
  }
} with { extension "transparent"}

//=======================================
//============= Types ===================
//=======================================

type enumerated E { e1,e2,e3 }

type enumerated Etext { One, Two, Three} 
with {
  variant "text 'One' as '1'"
  variant "text 'Two' as '2'"
  variant "text 'Three' as '3'"
}


//======= Record with one field =========
//no other attr than JSON
type record R0_json {
  integer i optional
} with { encode "JSON" }

type record R1_json {
  integer i optional
} with { encode "JSON"; variant(i) "JSON: omit as null"; }

type record R2_json {
  integer i optional
} with { encode "JSON"; variant(i) "JSON: name as Integer"; }

type record R3_json {
  integer i optional
} with { encode "JSON"; variant(i) "JSON: name as Integer"; variant(i) "JSON: omit as null";}

type record R4_json {
  integer i optional
} with { encode "JSON"; variant "JSON: as value";}

//======= Record with more field =========

//type record R10_json {
//  integer i optional,
//  float    f,
//  E       e
//} with { encode "JSON" }
//
//type record R11_json {
//  integer i optional
//} with { encode "JSON"; variant(i) "JSON: omit as null"; }
//
//type record R12_json {
//  integer i optional
//} with { encode "JSON"; variant(i) "JSON: name as Integer"; }
//
//type record R13_json {
//  integer i optional
//} with { encode "JSON"; variant(i) "JSON: name as Integer"; variant(i) "JSON: omit as null";}
//
//type record R14_json {
//  integer i optional
//} with { encode "JSON"; variant "JSON: as value";}

//=================================
//======= Testcases ===============
//=================================

//=== Enum ====

testcase tc_attr_enum_no_attr() runs on CT {
  var E x := e2;
  var bitstring expected := oct2bit(char2oct("\"e2\""));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

testcase tc_attr_enum_text_attr() runs on CT {
  var Etext x := One;
  var bitstring expected := oct2bit(char2oct("\"1\""));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}
//No attribute
testcase tc_rec_attr_no_attr_omit() runs on CT {
  var R0_json x := { i:=omit }
  var bitstring expected := oct2bit(char2oct("{}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);//TODO fail
}

testcase tc_rec_attr_no_attr_int() runs on CT {
  var R0_json x := { i:= 1 }
  var bitstring expected := oct2bit(char2oct("{\"i\":1}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

//Attribute: omit as null
testcase tc_rec_attr_omit_as_null_omitvalue() runs on CT {
  var R1_json x := { i:=omit }
  var bitstring expected := oct2bit(char2oct("{\"i\":null}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

testcase tc_rec_attr_omit_as_null_intvalue() runs on CT {
  var R1_json x := { i:= 1 }
  var bitstring expected := oct2bit(char2oct("{\"i\":1}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

//Attribute: name as
testcase tc_rec_attr_name_as_omitvalue() runs on CT {
  var R2_json x := { i:=omit }
  var bitstring expected := oct2bit(char2oct("{}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

testcase tc_rec_attr_name_as_intvalue() runs on CT {
  var R2_json x := { i:= 1 }
  var bitstring expected := oct2bit(char2oct("{\"Integer\":1}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

//Attribute: name as & omit as null
testcase tc_rec_attr_name_as_and_omit_as_null_omitvalue() runs on CT {
  var R3_json x := { i:=omit }
  var bitstring expected := oct2bit(char2oct("{\"Integer\":null}")); 
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

testcase tc_rec_attr_name_as_and_omit_as_null_intvalue() runs on CT {
  var R3_json x := { i:= 1 }
  var bitstring expected := oct2bit(char2oct("{\"Integer\":1}"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

//Attribute: as value & omit as null
testcase tc_rec_attr_as_value_and_omit_as_null_omitvalue() runs on CT {
  var R4_json x := { i:= omit } 
  var bitstring expected := oct2bit(char2oct("null")); 
  var bitstring encoded := encvalue(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}

testcase tc_rec_attr_as_value_and_omit_as_null_intvalue() runs on CT {
  var R4_json x := { i:= 1 }
  var bitstring expected := oct2bit(char2oct("1"));
  var bitstring encoded := encvalue(x);
  log(x);
  log(bit2oct(encoded));
  f_compare_bitstring(expected,encoded);
}
control {
  execute(tc_attr_enum_no_attr());
//  execute(tc_attr_enum_text_attr());
  execute(tc_rec_attr_no_attr_omit());
  execute(tc_rec_attr_no_attr_int());
  execute(tc_rec_attr_omit_as_null_omitvalue());
  execute(tc_rec_attr_omit_as_null_intvalue());
  execute(tc_rec_attr_name_as_omitvalue());
  execute(tc_rec_attr_name_as_intvalue());
  execute(tc_rec_attr_name_as_and_omit_as_null_omitvalue());
  execute(tc_rec_attr_name_as_and_omit_as_null_intvalue());
  execute(tc_rec_attr_as_value_and_omit_as_null_omitvalue());
  execute(tc_rec_attr_as_value_and_omit_as_null_intvalue());
}

} with {
encode "JSON";
}

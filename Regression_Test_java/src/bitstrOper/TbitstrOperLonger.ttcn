/******************************************************************************
* Copyright (c) 2000-2021 Ericsson Telecom AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Balasko, Jeno 
******************************************************************************/
//This module is almost the same as TbitstrOper but longer strings are used
module TbitstrOperLonger {

type component bitstrOper_comptype { };
const bitstring TbitstrOper_const1:='1000'B;

testcase tc_bitstrLongAssign() runs on bitstrOper_comptype
{ var bitstring x1:='0110111110000'B;
  var bitstring x2,x3,x4;
  x2:='011111110000'B;
  x4:='01'B;
  x3:=''B;
  x4:='0101'B;
  if (x1=='0110111110000'B) {setverdict(pass);}	//at declaration
  else {setverdict(fail);}
  if (x2=='011111110000'B) {setverdict(pass);}		//later
  else {setverdict(fail);}
  if (x3==''B) {setverdict(pass);}		//empty string
  else {setverdict(fail);}
  if (x4=='0101'B) {setverdict(pass);}		//change of size
  else {setverdict(fail);}
}

testcase tc_bitstrLongAssignElem10() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='1111000011111110'B;
  x4:='11111'B;
  x2:='00000'B;
  x5:='11111'B;
  x3:='1'B;
  x6:='0'B
  x3:=x2[1];
  x1[1]:='0'B;
  x4[3]:=x2[3];
  x5[1]:=x6;
  if (x1[0]=='1'B) {setverdict(pass);}		//accessing an element
  else {setverdict(fail);}
  if (x3=='0'B) {setverdict(pass);}		//change string to element
  else {setverdict(fail);}
  if (x1=='1011000011111110'B) {setverdict(pass);}	//change element to value
  else {setverdict(fail);}
  if (x4=='11101'B) {setverdict(pass);}	//change element to element
  else {setverdict(fail);}
  if (x5=='10111'B) {setverdict(pass);}	//change element to string
  else {setverdict(fail);}
  if (x1[15]=='0'B) {setverdict(pass);}		//accessing an element
}

testcase tc_bitstrLongAssignElem01() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='00000'B;
  x2:='11111'B;
  x4:='00000'B;
  x5:='00000'B;
  x6:='1'B;
  x3:='0'B;
  x3:=x2[1];
  x1[2]:='1'B;
  x4[1]:=x2[4];
  x5[1]:=x6;
  if (x3=='1'B) {setverdict(pass);}		//change string to element
  else {setverdict(fail);}
  if (x1=='00100'B) {setverdict(pass);}	//change element to value
  else {setverdict(fail);}
  if (x4=='01000'B) {setverdict(pass);}	//change element to element
  else {setverdict(fail);}
  if (x5=='01000'B) {setverdict(pass);}	//change element to string
  else {setverdict(fail);}
}

testcase tc_bitstrLongAssignElem00() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0000011111'B;
  x2:='00000'B;
  x4:='00000'B;
  x5:='00000'B;
  x6:='0'B;
  x3:='0'B;
  x3:=x2[1];
  x1[2]:='0'B;
  x4[1]:=x2[4];
  x5[1]:=x6;
  if (x3=='0'B) {setverdict(pass);}		//change string to element
  else {setverdict(fail);}
  if (x1=='0000011111'B) {setverdict(pass);}	//change element to value
  else {setverdict(fail);}
  if (x4=='00000'B) {setverdict(pass);}	//change element to element
  else {setverdict(fail);}
  if (x5=='00000'B) {setverdict(pass);}	//change element to string
  else {setverdict(fail);}
}

testcase tc_bitstrLongAssignElem11() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='1111100000'B;
  x2:='11111'B;
  x4:='11111'B;
  x5:='11111'B;
  x6:='1'B;
  x3:='1'B;
  x3:=x2[1];
  x1[2]:='1'B;
  x4[1]:=x2[4];
  x5[1]:=x6;
  if (x3=='1'B) {setverdict(pass);}		//change string to element
  else {setverdict(fail);}
  if (x1=='1111100000'B) {setverdict(pass);}	//change element to value
  else {setverdict(fail);}
  if (x4=='11111'B) {setverdict(pass);}	//change element to element
  else {setverdict(fail);}
  if (x5=='11111'B) {setverdict(pass);}	//change element to string
  else {setverdict(fail);}
}

testcase tc_bitstrLongAssignElemAdd() runs on bitstrOper_comptype
{var bitstring x1,x2;
  x1:='000'B;
  x2:='1111'B;
  x1[3]:='1'B;
  x2[4]:=x1[0];
  if (x1=='0001'B) {setverdict(pass);}	//add "1"
  else {setverdict(fail);}
  if (x2=='11110'B) {setverdict(pass);}	//add "0"
  else {setverdict(fail);}
}

testcase tc_bitstrLongLengthof() runs on bitstrOper_comptype
{ var bitstring x1:='0110111110000'B;
  var bitstring x2,x3,x4,x5;
  x2:='011111110000'B;
  x4:='01'B;
  x5:='01'B;
  x3:=''B;
  x4:='0101'B;
  x5[2]:='0'B;
  if (lengthof(x1)==5+8) {setverdict(pass);}	//at declaration
  else {setverdict(fail);}
  if (lengthof(x2)==4+8) {setverdict(pass);}	//later
  else {setverdict(fail);}
  if (lengthof(x3)==0) {setverdict(pass);}	//empty string
  else {setverdict(fail);}
  if (lengthof(x4)==4) {setverdict(pass);}	//change of size
  else {setverdict(fail);}
  if (lengthof(x5)==3) {setverdict(pass);}	//add element
  else {setverdict(fail);}
}

testcase tc_bitstrLongConst() runs on bitstrOper_comptype
{
  const bitstring TbitstrOper_const3:='0001'B;
  if (TbitstrOper_const1=='1000'B) {setverdict(pass);}	//definition part
  else {setverdict(fail);}
  if (TbitstrOper_const3=='0001'B) {setverdict(pass);}	//testcase
  else {setverdict(fail);}
}

testcase tc_bitstrLongComp_str_str() runs on bitstrOper_comptype
{var bitstring x1,x2,x3;
  x1:='0110'B;
  x2:='0110'B;
  x3:='011'B;
  if (x1==x2) {setverdict(pass);}	//equality, equals
  else {setverdict(fail);}
  if (not(x3==x2)) {setverdict(pass);}	//equality, not equals
  else {setverdict(fail);}
  if (x1!=x3) {setverdict(pass);}	//non-equality, not equals
  else {setverdict(fail);}
  if (not(x1!=x2)) {setverdict(pass);}	//non-equality, equals
  else {setverdict(fail);}
}

testcase tc_bitstrLongComp_el_str() runs on bitstrOper_comptype
{var bitstring x1,x2,x3;
  x1:='0110'B;
  x2:='1'B;
  x3:='0'B;
  if (x1[2]==x2) {setverdict(pass);}	//equality, equals
  else {setverdict(fail);}
  if (not(x1[2]==x3)) {setverdict(pass);}	//equality, not equals
  else {setverdict(fail);}
  if (x1[1]!=x3) {setverdict(pass);}	//non-equality, not equals
  else {setverdict(fail);}
  if (not(x1[1]!='1'B)) {setverdict(pass);}	//non-equality, equals
  else {setverdict(fail);}
}

testcase tc_bitstrLongComp_str_el() runs on bitstrOper_comptype
{var bitstring x1,x2,x3;
  x1:='0110'B;
  x2:='1'B;
  x3:='0'B;
  if (x2==x1[1]) {setverdict(pass);}	//equality, equals
  else {setverdict(fail);}
  if (not(x3==x1[1])) {setverdict(pass);}	//equality, not equals
  else {setverdict(fail);}
  if (x2!=x1[0]) {setverdict(pass);}	//non-equality, not equals
  else {setverdict(fail);}
  if (not('1'B!=x1[1])) {setverdict(pass);}	//non-equality, equals
  else {setverdict(fail);}
}

testcase tc_bitstrLongComp_el_el() runs on bitstrOper_comptype
{var bitstring x1,x2,x3;
  x1:='0110'B;
  x2:='0110'B;
  x3:='011'B;
  if (x1[2]==x2[2]) {setverdict(pass);}	//equality, equals
  else {setverdict(fail);}
  if (not(x1[2]==x2[3])) {setverdict(pass);}	//equality, not equals
  else {setverdict(fail);}
  if (x1[1]!=x3[0]) {setverdict(pass);}	//non-equality, not equals
  else {setverdict(fail);}
  if (not(x1[1]!=x3[1])) {setverdict(pass);}	//non-equality, equals
  else {setverdict(fail);}
}

testcase tc_bitstrLongConcat() runs on bitstrOper_comptype
{var bitstring x1,x2,x3,x4,x5,x6,x7,x8;
  x1:='0011'B;
  x2:='1100'B;
  x3:= x1 & x2;
  x4:=x1&x2[3];
  x5:=x1[1]&x2;
  x6:=x1[2]&x2[1];
  x7:='11111111000000001111111'B;
  x8:=x1[0]&x7;
  if ((x3=='00111100'B)and(lengthof(x3)==8)) {setverdict(pass);}	//string_string
  else {setverdict(fail);}
  if ((x4=='00110'B)and(lengthof(x4)==5)) {setverdict(pass);}		//string_element
  else {setverdict(fail);}
  if ((x5=='01100'B)and(lengthof(x5)==5)) {setverdict(pass);}		//element_string
  else {setverdict(fail);}
  if ((x6=='11'B)and(lengthof(x6)==2)) {setverdict(pass);}		//element_element
  else {setverdict(fail);}
  if((x8=='011111111000000001111111'B)and(lengthof(x8)==24)) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongNot_str() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0110111110000'B;
  x2:=not4b(x1);
  if (x2=='1001000001111'B) {setverdict(pass);}
  else {setverdict(fail);}
  log(not4b(x1));    // HQ51603: the generated C++ must compile
  action(not4b(x1)); // HQ51603
}

testcase tc_bitstrLongNot_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3;
  x1:='00111'B;
  x2:=not4b(x1[1]);
  x3:=not4b(x1[3]);
  if (x2=='1'B) {setverdict(pass);}	//not "0"
  else {setverdict(fail);}
  if (x3=='0'B) {setverdict(pass);}	//not "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongAnd_str_str() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3;
  x1:='0110111110000'B;
  x2:='0011100001111'B;
  x3:=x1 and4b x2;
  if (x3=='0010100000000'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongAnd_el_str() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='1'B;
  x3:=x1[0] and4b '0'B;
  x4:=x1[0] and4b x2;
  x5:=x1[2] and4b '0'B;
  x6:=x1[3] and4b x2;
  if (x3=='0'B) {setverdict(pass);}	//"0" and "0"
  else {setverdict(fail);}
  if (x4=='0'B) {setverdict(pass);}	//"0" and "1"
  else {setverdict(fail);}
  if (x5=='0'B) {setverdict(pass);}	//"1" and "0"
  else {setverdict(fail);}
  if (x6=='1'B) {setverdict(pass);}	//"1" and "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongAnd_str_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='1'B;
  x3:='0'B and4b x1[0];
  x4:=x2 and4b x1[1];
  x5:='0'B and4b x1[2];
  x6:=x2 and4b x1[3];
  if (x3=='0'B) {setverdict(pass);}	//"0" and "0"
  else {setverdict(fail);}
  if (x4=='0'B) {setverdict(pass);}	//"0" and "1"
  else {setverdict(fail);}
  if (x5=='0'B) {setverdict(pass);}	//"1" and "0"
  else {setverdict(fail);}
  if (x6=='1'B) {setverdict(pass);}	//"1" and "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongAnd_el_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='0011'B;
  x3:=x2[0] and4b x1[0];
  x4:=x2[1] and4b x1[3];
  x5:=x1[3] and4b x1[0];
  x6:=x2[3] and4b x1[3];
  if (x3=='0'B) {setverdict(pass);}	//"0" and "0"
  else {setverdict(fail);}
  if (x4=='0'B) {setverdict(pass);}	//"0" and "1"
  else {setverdict(fail);}
  if (x5=='0'B) {setverdict(pass);}	//"1" and "0"
  else {setverdict(fail);}
  if (x6=='1'B) {setverdict(pass);}	//"1" and "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongOr_str_str() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3;
  x1:='0110111110000'B;
  x2:='0011100011111'B;
  x3:=x1 or4b x2;
  if (x3=='0111111111111'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongOr_el_str() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='1'B;
  x3:=x1[0] or4b '0'B;
  x4:=x1[0] or4b x2;
  x5:=x1[2] or4b '0'B;
  x6:=x1[3] or4b x2;
  if (x3=='0'B) {setverdict(pass);}	//"0" or "0"
  else {setverdict(fail);}
  if (x4=='1'B) {setverdict(pass);}	//"0" or "1"
  else {setverdict(fail);}
  if (x5=='1'B) {setverdict(pass);}	//"1" or "0"
  else {setverdict(fail);}
  if (x6=='1'B) {setverdict(pass);}	//"1" or "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongOr_str_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='1'B;
  x3:='0'B or4b x1[0];
  x4:=x2 or4b x1[1];
  x5:='0'B or4b x1[2];
  x6:=x2 or4b x1[3];
  if (x3=='0'B) {setverdict(pass);}	//"0" or "0"
  else {setverdict(fail);}
  if (x4=='1'B) {setverdict(pass);}	//"0" or "1"
  else {setverdict(fail);}
  if (x5=='1'B) {setverdict(pass);}	//"1" or "0"
  else {setverdict(fail);}
  if (x6=='1'B) {setverdict(pass);}	//"1" or "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongOr_el_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='0011'B;
  x3:=x2[0] or4b x1[0];
  x4:=x2[1] or4b x1[3];
  x5:=x1[3] or4b x1[0];
  x6:=x2[3] or4b x1[3];
  if (x3=='0'B) {setverdict(pass);}	//"0" or "0"
  else {setverdict(fail);}
  if (x4=='1'B) {setverdict(pass);}	//"0" or "1"
  else {setverdict(fail);}
  if (x5=='1'B) {setverdict(pass);}	//"1" or "0"
  else {setverdict(fail);}
  if (x6=='1'B) {setverdict(pass);}	//"1" or "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongXor_str_str() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3;
  x1:='0110111110000'B;
  x2:='0011100010000'B;
  x3:=x1 xor4b x2;
  if (x3=='0101011100000'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongXor_el_str() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='1'B;
  x3:=x1[0] xor4b '0'B;
  x4:=x1[0] xor4b x2;
  x5:=x1[2] xor4b '0'B;
  x6:=x1[3] xor4b x2;
  if (x3=='0'B) {setverdict(pass);}	//"0" xor "0"
  else {setverdict(fail);}
  if (x4=='1'B) {setverdict(pass);}	//"0" xor "1"
  else {setverdict(fail);}
  if (x5=='1'B) {setverdict(pass);}	//"1" xor "0"
  else {setverdict(fail);}
  if (x6=='0'B) {setverdict(pass);}	//"1" xor "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongXor_str_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='1'B;
  x3:='0'B xor4b x1[0];
  x4:=x2 xor4b x1[1];
  x5:='0'B xor4b x1[2];
  x6:=x2 xor4b x1[3];
  if (x3=='0'B) {setverdict(pass);}	//"0" xor "0"
  else {setverdict(fail);}
  if (x4=='1'B) {setverdict(pass);}	//"0" xor "1"
  else {setverdict(fail);}
  if (x5=='1'B) {setverdict(pass);}	//"1" xor "0"
  else {setverdict(fail);}
  if (x6=='0'B) {setverdict(pass);}	//"1" xor "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongXor_el_el() runs on bitstrOper_comptype
{ var bitstring x1,x2,x3,x4,x5,x6;
  x1:='0011'B;
  x2:='0011'B;
  x3:=x2[0] xor4b x1[0];
  x4:=x2[1] xor4b x1[3];
  x5:=x1[3] xor4b x1[0];
  x6:=x2[3] xor4b x1[3];
  if (x3=='0'B) {setverdict(pass);}	//"0" xor "0"
  else {setverdict(fail);}
  if (x4=='1'B) {setverdict(pass);}	//"0" xor "1"
  else {setverdict(fail);}
  if (x5=='1'B) {setverdict(pass);}	//"1" xor "0"
  else {setverdict(fail);}
  if (x6=='0'B) {setverdict(pass);}	//"1" xor "1"
  else {setverdict(fail);}
}

testcase tc_bitstrLongShiftRight1() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0110111110001'B;
  x2:=x1 >> 1;
  if (x2=='0011011111000'B) {setverdict(pass);}
  else {setverdict(fail, "expected: '0011011111000'B got:", x2);}
}

testcase tc_bitstrLongShiftRight2() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0110111110001'B;
  x2:=x1 >> 2;
  if (x2=='0001101111100'B) {setverdict(pass);}
  else {setverdict(fail, "expected: '0001101111100'B got:", x2);}
}

testcase tc_bitstrLongShiftRightSum() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0110111110001'B;
  x2:=x1 >> (1+1);
  if (x2=='0001101111100'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongShiftRightEmpty() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:=''B;
  x2:=x1 >> 1;
  if (x2==''B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongShiftLeft1() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='1010101010000'B;
  x2:=x1 << 1;
  if (x2=='0101010100000'B) {setverdict(pass,"'1010101010000'B <<1 expected '0101010100000'B got:",x2);}
  else {setverdict(fail,"'1010101010000'B <<1 expected '0101010100000'B got:",x2);}
}

testcase tc_bitstrLongShiftLeft2() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='1010101010000'B;
  x2:=x1 << 2;
  if (x2=='1010101000000'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongShiftLeft2a() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0101010100000'B
  x2:=x1 << 2;
  if (x2=='0101010000000'B) {setverdict(pass);}
  else {setverdict(fail,"'0101010100000'B <<2 expected '0101010000000'B got: ",x2);}
}

testcase tc_bitstrLongShiftLeft2b() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0101010000000'B
  x2:=x1 << 2;
  if (x2=='0101000000000'B) {setverdict(pass,"'0101010000000'B <<2 expected '0101000000000'B got: ",x2);}
  else {setverdict(fail,"'0101010000000'B <<2 expected '0101000000000'B got: ",x2);}
}

testcase tc_bitstrLongShiftLeftSum() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0101010101000'B;
  x2:=x1 << (1+1);
  if (x2=='0101010100000'B) {setverdict(pass,"'0101010101000'B <<1+1 expected '0101010100000'B got: ",x2);}
  else {setverdict(fail,"'0101010101000'B <<1+1 expected '0101010100000'B got: ",x2);}
}

testcase tc_bitstrLongShiftLeftEmpty() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:=''B;
  x2:=x1 << 1;
  if (x2==''B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongRotateRight1() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0110111110001'B;
  x2:=x1 @> 1;
  if (x2=='1011011111000'B) {setverdict(pass);}
  //       '0110111110001'B;
  else {setverdict(fail, "'0110111110001'B @>1 expected: '1011011111000'B got:", x2);}
}

testcase tc_bitstrLongRotateRight2() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0110111110000'B;
  x2:=x1 @> 2;
  if (x2=='0001101111100'B) {setverdict(pass);}
  //       '0110111110000'B;
  else {setverdict(fail,"'0110111110000'B @>2 expected: '0001101111100'B got:", x2);}
}

testcase tc_bitstrLongRotateRightSum() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='1111111100001'B;
  x2:=x1 @> (1+1);
  if (x2=='0111111111000'B) {setverdict(pass);}
  else {setverdict(fail,"expected: '0111111111000'B got:", x2);}
}

testcase tc_bitstrLongRotateRightEmpty() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:=''B;
  x2:=x1 @> 1;
  if (x2==''B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongRotateLeft1() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='1000000010101'B;
  x2:=x1 <@ 1;
  if (x2=='0000000101011'B) {setverdict(pass);}
  else {setverdict(fail,"'1000000010101'B <@ 1 expected: '0000000101011'B got:", x2);}
}

testcase tc_bitstrLongRotateLeft1a() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0100100010001'B;
  x2:=x1 <@ 1;
  if (x2=='1001000100010'B) {setverdict(pass);}
  else {setverdict(fail,"'0100100010001'B <@ 1 expected: '1001000100010'B got:", x2);}
}

testcase tc_bitstrLongRotateLeft2() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0100000010101'B;
  x2:=x1 <@ 2;
  if (x2=='0000001010101'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongRotateLeftSum() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:='0100000010101'B;
  x2:=x1 <@ (1+1);
  if (x2=='0000001010101'B) {setverdict(pass);}
  else {setverdict(fail);}
}

testcase tc_bitstrLongRotateLeftEmpty() runs on bitstrOper_comptype
{ var bitstring x1,x2;
  x1:=''B;
  x2:=x1 <@ 1;
  if (x2==''B) {setverdict(pass);}
  else {setverdict(fail);}
}

type bitstring mybstr1
type mybstr1 mybstr2
type mybstr1 mybstr3 ('0'B, '1'B)
type mybstr1 mybstr4 ('0'B, '1'B) length(1)
type mybstr1 mybstr5 length(1)
type mybstr1 mybstr6 (int2bit(512, 11), int2bit(1024, 11))
// Length 0.
type bitstring mybstr7 length(0..0)
type bitstring MyByte length(8..8)
type bitstring MyNibbleToByte length(4..8)
type bitstring BitStrings1 ('0'B, '1'B)
type bitstring BitStrings2 ('00'B, '01'B, '10'B, '10'B)
type bitstring BitStrings10 ('0101101110'B, '0000000000'B, '1111111111'B, '1010101010'B)
type bitstring BitStrings_1_2 (BitStrings1, BitStrings2)
type bitstring BitStrings_1_2_10 (BitStrings1, BitStrings2, BitStrings10);
type bitstring mybstr8 (mybstr3, mybstr4)
type bitstring mybstr9 length(0..infinity)  // Full set.

const mybstr4 c_mybstr1 := '0'B
const mybstr8 c_mybstr2 := c_mybstr1

template mybstr4 t_mybstr1 := '0'B
template mybstr8 t_mybstr2 := t_mybstr1
template mybstr7 t_mybstr3 := ''B length(0)

function f_bstr1() return mybstr3 {
  var mybstr2 v_mybstr1 := int2bit(bit2int('0'B), 1)
  var template mybstr4 vt_mybstr1 := '1'B
  // `vt_mybstr1[0] := '0'B' doesn't compile.  T_REFD nodes were not handled
  // in the fix for TR 921.
  return substr(v_mybstr1 & valueof(vt_mybstr1), 0, 1)
}

testcase tc_bitstrLongSubtypes(in template mybstr3 p1) runs on bitstrOper_comptype {
  var template mybstr3 vt_mybstr1 := '0'B  // Value list.
  var template mybstr4 vt_mybstr2 := '0'B  // Length with value list.
  var template mybstr5 vt_mybstr3 := '0'B  // Length only.
  var mybstr3 v_mybstr1 := valueof(vt_mybstr1)
  var mybstr4 v_mybstr2 := valueof(vt_mybstr2)
  var mybstr5 v_mybstr3 := valueof(vt_mybstr3)

  if (valueof(vt_mybstr1) == v_mybstr1 and v_mybstr2 == valueof(vt_mybstr2)) { setverdict(pass) }
  else { setverdict(fail) }
  if (valueof(vt_mybstr3) == v_mybstr3) { setverdict(pass) }
  else { setverdict(fail) }
  if (f_bstr1() == c_mybstr1 and '0'B == f_bstr1()) { setverdict(pass) }
  else { setverdict(fail) }
}

testcase tc_bitstrLongIsvalue() runs on bitstrOper_comptype{
  var bitstring ostr0;
  var bitstring ostr1 := '1111'B;
  var template bitstring tostr;

  if ( isvalue(ostr0) ) { setverdict(fail); } else { setverdict(pass); };
  if ( isvalue(ostr1) ) { setverdict(pass); } else { setverdict(fail); };
  if ( isvalue(tostr) ) { setverdict(fail); } else { setverdict(pass); };
}

testcase tc_bitstrLongIsbound() runs on bitstrOper_comptype{
  var bitstring ostr0;
  var bitstring ostr1 := '1111'B;
  var template bitstring tostr;

  if ( isbound(ostr0) ) { setverdict(fail); } else { setverdict(pass); };
  if ( isbound(ostr0[0]) ) { setverdict(fail); } else { setverdict(pass); };
  if ( isbound(ostr1) ) { setverdict(pass); } else { setverdict(fail); };
  if ( isbound(tostr) ) { setverdict(fail); } else { setverdict(pass); };
}

control
{
  const bitstring cl_1:='1000'B;
  var bitstring vl_1;
  const integer N := 1;
  for(var integer i:=0;i<N;i:=i+1) {
    execute(tc_bitstrLongAssign());
    execute(tc_bitstrLongAssignElem10());
    execute(tc_bitstrLongAssignElem01());
    execute(tc_bitstrLongAssignElem00());
    execute(tc_bitstrLongAssignElem11());
    execute(tc_bitstrLongAssignElemAdd());
    execute(tc_bitstrLongLengthof());
    execute(tc_bitstrLongConst());
    execute(tc_bitstrLongComp_str_str());
    execute(tc_bitstrLongComp_el_str());
    execute(tc_bitstrLongComp_str_el());
    execute(tc_bitstrLongComp_el_el());
    execute(tc_bitstrLongConcat());
    execute(tc_bitstrLongNot_str());
    execute(tc_bitstrLongNot_el());
    execute(tc_bitstrLongAnd_str_str());
    execute(tc_bitstrLongAnd_el_str());
    execute(tc_bitstrLongAnd_str_el());
    execute(tc_bitstrLongAnd_el_el());
    execute(tc_bitstrLongOr_str_str());
    execute(tc_bitstrLongOr_el_str());
    execute(tc_bitstrLongOr_str_el());
    execute(tc_bitstrLongOr_el_el());
    execute(tc_bitstrLongXor_str_str());
    execute(tc_bitstrLongXor_el_str());
    execute(tc_bitstrLongXor_str_el());
    execute(tc_bitstrLongXor_el_el());
    execute(tc_bitstrLongShiftRight1());
    execute(tc_bitstrLongShiftRight2());
    execute(tc_bitstrLongShiftRightSum());
    execute(tc_bitstrLongShiftRightEmpty());
    execute(tc_bitstrLongShiftLeft1());
    execute(tc_bitstrLongShiftLeft2());
    execute(tc_bitstrLongShiftLeft2a());
    execute(tc_bitstrLongShiftLeft2b());
    execute(tc_bitstrLongShiftLeftSum());
    execute(tc_bitstrLongShiftLeftEmpty());
    execute(tc_bitstrLongRotateRight1());
    execute(tc_bitstrLongRotateRight2());
    execute(tc_bitstrLongRotateRightSum());
    execute(tc_bitstrLongRotateRightEmpty());
    execute(tc_bitstrLongRotateLeft1());
    execute(tc_bitstrLongRotateLeft1a());
    execute(tc_bitstrLongRotateLeft2());
    execute(tc_bitstrLongRotateLeftSum());
    execute(tc_bitstrLongRotateLeftEmpty());
    execute(tc_bitstrLongSubtypes('0'B));
    execute(tc_bitstrLongIsvalue());
    execute(tc_bitstrLongIsbound());
  }
}
}

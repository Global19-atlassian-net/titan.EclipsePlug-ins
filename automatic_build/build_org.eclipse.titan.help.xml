<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2000-2016 Ericsson Telecom AB

 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 -->
<project basedir="." default="build" name="org.eclipse.titan.help"
	xmlns:if="ant:if" xmlns:unless="ant:unless">

	<import file="build_import.xml"/>

	<target name="build" depends="build.pdf,build.online.help,build.standards" />

	<target name="build.jars" depends="build">
		<mkdir dir="${result.dir}/plugins"/>
		<update.manifest file="${build.dir}/${help.name}/META-INF/MANIFEST.MF"/>
		<jar destfile="${result.dir}/plugins/org.eclipse.titan.help_${version.qualifier}.jar"
			 manifest="${build.dir}/${help.name}/META-INF/MANIFEST.MF">
			<fileset dir="." />
		</jar>
	</target>

	<target name="check.doc2pdf.jar">
		<available file="${doc2pdf.jar}" property="doc2pdf.jar.present"/>
		<echo message="${doc2pdf.jar} file present? ${doc2pdf.jar.present}" />
	</target>

	<target name="build.pdf" depends="check.doc2pdf.jar" if="doc2pdf.jar.present">
		<build.usrguide usrguide.dir="${usrguide.eclipse.dir}"/>
		<build.usrguide usrguide.dir="${usrguide.compiler.dir}"/>
	</target>
	
	<target name="build.standards">
		<copy todir="${build.dir}/${help.name}/docs">
			<fileset dir="${online.help.dir}/docs">
				<include name="*.pdf"/>
			</fileset>
		</copy>
	</target>
	
	<target name="build.online.help">
		<copy todir="${build.dir}/${help.name}">
			<fileset dir="${online.help.dir}">
				<include name="*.html"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${help.name}/images">
			<fileset dir="${online.help.dir}/images">
				<include name="**/*"/>
				<exclude name="**/.gitignore"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${help.name}/info">
			<fileset dir="${online.help.dir}/info">
				<include name="**/*"/>
				<exclude name="**/.gitignore"/>
			</fileset>
		</copy>
	</target>

	<macrodef name="build.usrguide">
		<attribute name="usrguide.dir"/>
		<sequential>
			<log message="-> build.usrguide( @{usrguide.dir} )"/>
			<condition property="build.help.true">
				<istrue value="${build.help}" />
			</condition>
			<log message="build.help = ${build.help}"/>
			<log message="build.help.true = ${build.help.true}"/>
			<build.usrguide.if.build.help
				if:set="build.help.true"
				usrguide.dir="@{usrguide.dir}" />
		</sequential>
	</macrodef>

	<macrodef name="build.usrguide.if.build.help">
		<attribute name="usrguide.dir"/>
		<sequential>
			<log message="-> build.usrguide.if.build.help( @{usrguide.dir} )"/>
			<echo message="Creating userguide pdfs from dir: @{usrguide.dir}"/>

			<fileset id="@{usrguide.dir}.docFiles" dir="@{usrguide.dir}">
				<include name="*.doc"/>
			</fileset>

			<pathconvert property="@{usrguide.dir}.usrguide.list" refid="@{usrguide.dir}.docFiles" targetos="unix"/>
			<log message="usrguide.dir.usrguide.list = ${@{usrguide.dir}.usrguide.list}"/>

			<iterate list="${@{usrguide.dir}.usrguide.list}" unless:blank="${@{usrguide.dir}.usrguide.list}">
				<convert.pdf docFile="${element}" />
			</iterate>

			<copy todir="${build.dir}/${help.name}/docs">
				<fileset dir="@{usrguide.dir}">
					<include name="*.pdf"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<!--
	    Converts doc file to pdf, new file is created in the same directory
            @param docFile the doc filename with full path
	-->
	<macrodef name="convert.pdf">
		<attribute name="docFile"/>
		<sequential>
			<log message="-> convert.pdf( @{docFile} )"/>
			<!-- Create pdf file name from doc filename -->
			<!-- result will be written in ${@{docFile}.pdfFile}, the input @{docFile} is left untouched -->
			<exec executable="sed" inputstring="@{docFile}" outputproperty="@{docFile}.pdfFile">
				<arg value="s/\.doc$/\.pdf/g"/>
			</exec>
			<log message="docFile = @{docFile}"/>
			<log message="docFile.pdfFile = ${@{docFile}.pdfFile}"/>
			<!--
				Set this option below to mark build as failed, if the doc2pdf comes back with an error message:
				jvm="${java6}" failonerror="true">
			-->
			<!-- Comment out for debug purposes, it is very slow -->
			<java jar="${doc2pdf.jar}" timeout="180000" fork="true"
				jvm="${java6}" failonerror="false">
				<arg value="@{docFile}"/>
				<arg value="${@{docFile}.pdfFile}"/>
			</java>
			<!-- Keep it for debug purposes,
			     copying doc to pdf is a simple way to have pdf
			     if pdf conversion is commented out -->
			<!--
			<copy file="@{docFile}" tofile="${@{docFile}.pdfFile}"/>
			-->
		</sequential>
	</macrodef>

	<target name="clean">
		<delete dir="bin"/>
	</target>

	<target depends="clean" name="cleanall"/>
</project>
